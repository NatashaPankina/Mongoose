import pygame
import sys

invent_n_x_y = [(), (), (), (), (), (), (), (), ()]
class Hero(pygame.sprite.Sprite):
    im = pygame.image.load('a (1).png')
    #image = pygame.transform.scale(im, (im.get_width() // 2, im.get_height() // 2))
    image = pygame.transform.scale(im, (100, 100))
    
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = Hero.image
        self.rect = self.image.get_rect()
        self.mask = pygame.mask.from_surface(self.image)
        self.rect.x = screen2.get_width() // 2
        self.rect.y = screen2.get_height() // 2
        self.turn = 0
 
    def up(self):
        self.image = pygame.transform.rotate(self.image, 360 - self.turn)
        self.turn = 0
        
    def down(self):
        self.image = pygame.transform.rotate(self.image, 180 - self.turn)
        self.turn = 180
        
    def right(self):
        self.image = pygame.transform.rotate(self.image, 270 - self.turn)
        self.turn = 270
        
    def left(self):
        self.image = pygame.transform.rotate(self.image, 90 - self.turn)
        self.turn = 90
    
    def up_left(self):
        self.image = pygame.transform.rotate(self.image, 45 - self.turn)
        self.turn = 45
        
    def down_left(self):
        self.image = pygame.transform.rotate(self.image, 135 - self.turn)
        self.turn = 135
        
    def down_right(self):
        self.image = pygame.transform.rotate(self.image, 225 - self.turn)
        self.turn = 225
        
    def up_right(self):
        self.image = pygame.transform.rotate(self.image, 315 - self.turn)
        self.turn = 315        
        
    def add_image(self):
        return self.image
    
    def add_rect(self):
        return self.rect
    
    def add_turn(self):
        return self.turn    
 
 
class Labyrinth(pygame.sprite.Sprite):
    image = pygame.image.load('walls2.png')
    #image = pygame.transform.scale(im, (4000, 4000))
    image2 = pygame.image.load('floor2.png')
    
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = Labyrinth.image
        self.image2 = Labyrinth.image2
        self.rect = self.image.get_rect()
        #self.rect = pygame.Rect(-3000, -3000, 4000, 4000)
        self.mask = pygame.mask.from_surface(self.image)
        
    def up(self):
        self.rect.y += 10
 
    def down(self):
        self.rect.y -= 10
 
    def right(self):
        self.rect.x -= 10
 
    def left(self):
        self.rect.x += 10
 
    def add_image(self):
        return self.image
    
    def add_image2(self):
        return self.image2
 
    def add_rect(self):
        return self.rect
    

class Inventory(pygame.sprite.Sprite):
    #im = pygame.image.load('a (1).png')
    #image = pygame.transform.scale(im, (im.get_width() // 2, im.get_height() // 2))
    
    def __init__(self, name, x_y):
        pygame.sprite.Sprite.__init__(self)
        image = pygame.image.load(name)
        self.image = Inventory.image
        self.rect = self.image.get_rect()
        self.mask = pygame.mask.from_surface(self.image)
        self.rect.x = x_y[0]
        self.rect.y = x_y[1]
 
    def up(self):
        self.rect.y += 10
 
    def down(self):
        self.rect.y -= 10
 
    def right(self):
        self.rect.x -= 10
 
    def left(self):
        self.rect.x += 10
 
    def add_image(self):
        return self.image
 
    def add_rect(self):
        return self.rect
 
 
if __name__ == '__main__':
    pygame.init()
    screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
    #print(screen.get_height(), screen.get_width())
    running = True
    clock = pygame.time.Clock()
    screen2 = pygame.Surface((screen.get_width() // 3 * 2, screen.get_height() ))
    l = Labyrinth()
    h = Hero()
    turn = 0
    image = pygame.image.load('floor2.png')
    #scre
    screen.blit(image, (0, 0))
    screen2.blit(image, (0, 0))
    #screen2.blit(l.add_image(), )
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    running = False
                    
        key = pygame.key.get_pressed()
        if (key[pygame.K_RIGHT] or key[pygame.K_d]) and (key[pygame.K_UP] or key[pygame.K_w]):
            if not pygame.sprite.collide_mask(l, h):
                h.up_right()
                l.right()
                l.up()                
                if pygame.sprite.collide_mask(l, h):
                    h.down_left()
                    l.left()
                    l.down()                    
        elif (key[pygame.K_RIGHT] or key[pygame.K_d]) and (key[pygame.K_DOWN] or key[pygame.K_s]):
            if not pygame.sprite.collide_mask(l, h):
                h.down_right()
                l.right()
                l.down()                
                if pygame.sprite.collide_mask(l, h):
                    h.up_left
                    l.left()
                    l.up()                    
        elif (key[pygame.K_LEFT] or key[pygame.K_a]) and (key[pygame.K_UP] or key[pygame.K_w]):
            if not pygame.sprite.collide_mask(l, h):
                h.up_left
                l.left()
                l.up()                
                if pygame.sprite.collide_mask(l, h):
                    h.down_right()
                    l.right()
                    l.down()                    
        elif (key[pygame.K_LEFT] or key[pygame.K_a]) and (key[pygame.K_DOWN] or key[pygame.K_s]):
            if not pygame.sprite.collide_mask(l, h):
                h.down_left()
                l.left()
                l.down()               
                if pygame.sprite.collide_mask(l, h):
                    h.up_right()
                    l.right()
                    l.left()                    
        elif key[pygame.K_RIGHT] or key[pygame.K_d]:
            '''turn = h.add_turn()
            h.right()
            if not pygame.sprite.collide_mask(l, h):
                l.right()
                if pygame.sprite.collide_mask(l, h):
                    h.left()
                    l.left()
            else:
                if turn == 0:
                    h.up()
                elif turn == 90:
                    h.left()
                elif turn == 180:
                    h.down()
                elif turn == 270:
                    h.right() '''
            if not pygame.sprite.collide_mask(l, h):
                h.right()
                l.right()
                if pygame.sprite.collide_mask(l, h):
                    h.left()
                    l.left()        
                    
        elif key[pygame.K_DOWN] or key[pygame.K_s]:
            '''turn = h.add_turn()
            h.down()
            if not pygame.sprite.collide_mask(l, h):
                l.down()
                if pygame.sprite.collide_mask(l, h):
                    h.up()
                    l.up()
            else:
                if turn == 0:
                    h.up()
                elif turn == 90:
                    h.left()
                elif turn == 180:
                    h.down()
                elif turn == 270:
                    h.right()'''             
            if not pygame.sprite.collide_mask(l, h):
                h.down()
                l.down()
                if pygame.sprite.collide_mask(l, h):
                    h.up()
                    l.up()
                    
        elif key[pygame.K_LEFT] or key[pygame.K_a]:
            '''turn = h.add_turn()
            h.left()
            if not pygame.sprite.collide_mask(l, h):
                l.left()
                if pygame.sprite.collide_mask(l, h):
                    h.right()
                    l.right()
            else:
                if turn == 0:
                    h.up()
                elif turn == 90:
                    h.left()
                elif turn == 180:
                    h.down()
                elif turn == 270:
                    h.right()    '''        
            if not pygame.sprite.collide_mask(l, h):
                h.left()
                l.left()
                if pygame.sprite.collide_mask(l, h):
                    h.right()
                    l.right()
              
        elif key[pygame.K_UP] or key[pygame.K_w]:
            '''turn = h.add_turn()
            h.up()
            if not pygame.sprite.collide_mask(l, h):
                l.up()
                if pygame.sprite.collide_mask(l, h):
                    h.down()
                    l.down()
            else:
                if turn == 0:
                    h.up()
                elif turn == 90:
                    h.left()
                elif turn == 180:
                    h.down()
                elif turn == 270:
                    h.right()'''           
            if not pygame.sprite.collide_mask(l, h):
                h.up()
                l.up()
                if pygame.sprite.collide_mask(l, h):
                    h.down()
                    l.down()
        
 
        screen2.blit(l.add_image2(), l.add_rect())
        screen2.blit(l.add_image(), l.add_rect())        
        screen2.blit(h.add_image(), h.add_rect())
        clock.tick()
        '''image = pygame.image.load('floor2.png')
        screen.blit(image, (0, 0))'''
        #screen2.blit(image, (0, 0))
        screen.blit(screen2, (0, 0))
        #screen2.blit(image, (0, 0))
        pygame.display.flip()
    pygame.quit()
